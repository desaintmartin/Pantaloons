// EquiangularToRectilinear kernel
// Michael Rondinelli
// (c) 2009 by EyeSee360, Inc.
// Sept. 9, 2009
<languageVersion : 1.0;>


kernel EquiangularToRectilinear
<   namespace : "com.eyesee360.geometry";
    vendor : "EyeSee360";
    version : 1;
    description : "Equiangular Mirror to Rectilinear";
    displayname : "Equiangular Mirror to Rectilinear";
>
{
    input image4 src;
    output pixel4 dst;
    
    parameter float2 inputDimensions
    <
        minValue : float2(1.0,1.0);
        maxValue : float2(8000.0,8000.0);
        defaultValue: float2(2000.0, 1000.0); 
    >;

    parameter float2 outputDimensions
    <
        minValue : float2(1.0, 1.0);
        maxValue : float2(8000.0, 8000.0);
        defaultValue : float2(512.0,512.0);
    >;

	parameter float2 mirrorRange
	<
		minValue: float2(-1.57, -1.57);
		maxValue: float2(1.57, 1.57);
		defaultValue : float2(-1.3962634 /* -80 */, 2.26892803 /* 130 */);
	>;
	
    // Normalized coordinates
    parameter float2 mirrorCenter
    <
        defaultValue : float2(0.5, 0.5);
    >;
    
    parameter float2 mirrorRadius
    <
    	defaultValue : float2(0.5, 0.5);
    >;
    
    parameter float scaleX
    <
    	defaultValue : -1.0;
    >;

	parameter float3x3 rotationMatrix
	<
		description : "rotation matrix for viewing";
		defaultValue : float3x3(1);	// identity
	>;

    parameter float4 viewBounds
    < 
        minValue : float4(-10.0, -10.0, 0.01, 0.01);
        maxValue : float4(10.0, 10.0, 10.0, 10.0);
        defaultValue : float4(-1.0, -1.0, 2.0, 2.0); 
    >;

    void evaluatePixel()
    {
        // Normalized output coordinate (between 0 and 1)
		float2 outputPoint = outCoord() / outputDimensions;
        float2 planePoint = outputPoint * viewBounds.zw + viewBounds.xy;

        // Perspective to 3-position
        float3 position;
        position.xy = planePoint;
        position.z = 1.0;
		position = normalize(position);
		
        // 3-axis Rotation
        position = position * rotationMatrix;
        position.x *= scaleX;
		
		// Input point from position
		float r = (asin(position.y) - mirrorRange.x) * mirrorRange.y; 
		float2 inputPoint = mirrorCenter + position.xz * mirrorRadius * r;
        
        // Denormalize coordinate
        inputPoint *= inputDimensions;

		// Sample the pixel
        dst = sample(src,inputPoint);
    }
}
